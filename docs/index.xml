<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mainroad</title>
    <link>/</link>
    <description>Recent content on Mainroad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting started</title>
      <link>/docs/getting-started/</link>
      <pubDate>Mon, 24 Jan 2022 14:00:00 +0000</pubDate>
      
      <guid>/docs/getting-started/</guid>
      <description>&lt;p&gt;Welcome to the Mainroad theme documentation. This quick start guide covers Mainroad theme installation and minimal
configuration and is intended for intermediate to advanced users. To understand this guide, you need to be familiar
with the &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static site generator.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Customization</title>
      <link>/docs/customization/</link>
      <pubDate>Mon, 24 Jan 2022 14:00:00 +0000</pubDate>
      
      <guid>/docs/customization/</guid>
      <description>&lt;p&gt;Customization page describes common Mainroad configuration parameters which can be specified via configuration file or
via Front Matter section. That includes logo section tuning, adding a sidebar with widgets, adjusting highlight color,
and more.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Frequently asked questions (FAQ)</title>
      <link>/docs/faq/</link>
      <pubDate>Mon, 24 Jan 2022 14:00:00 +0000</pubDate>
      
      <guid>/docs/faq/</guid>
      <description>&lt;p&gt;Browse this FAQ page to find answers to frequently asked questions that have not been covered elsewhere
in the documentation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Queue的put、join和task_one</title>
      <link>/python%E7%AC%94%E8%AE%B0/queue%E7%9A%84putjoin%E5%92%8Ctask_one/</link>
      <pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/python%E7%AC%94%E8%AE%B0/queue%E7%9A%84putjoin%E5%92%8Ctask_one/</guid>
      <description>Introduction to Go Templates 在学习Queue时task_one时让我迷惑了很久，理清之后写下了这篇笔记。
python中的queue库提供了一个线程安全的类Queue，它和普通的队列一样具有先进先出的特点，不同的在于它对与空队列的处理。
Queue对象使用get弹出队头的元素，使用put将元素插入队尾。Queue的源码并不长，在源码中Queue内部设置了条件变量，当队列为空而执行get操作时，该操作将会被阻塞；当队列满而执行put操作时，该操作同样会被阻塞。此外queue内部设置的队列是collections提供的deque，这是一个线程安全的双端队列，对它进行入队和出队操作都是原子操作，而Queue的get和put操作沿用了这一操作，所以Queue也是线程安全的，这使得Queue常用于多线程中。
接下来转入正题。
要理解task_one，就需要理解与put、join、task_one三个操作都相关的内部属性unfinished_tasks。
每当执行一次put操作，unfinished_tasks就加一，可理解为put代表增加了一个任务；
每执行一次task_one操作，unfinished_tasks就减一，可以把task_one放在get操作之后，当get成功执行后，在执行task_one使得unfinished_tasks减一，代表完成了一个任务；
而join则通过判断unfinished_tasks是否为零执行wait操作；
在python的官方文档中有关于task_one的代码样例，我在样例的基础上增加了关于unfinished_tasks的注释，以便读者理解：
import threading, queue q = queue.Queue() def worker(): while True: item = q.get() print(f&amp;#39;Working on {item}&amp;#39;) print(f&amp;#39;Finished {item}&amp;#39;) q.task_done()	# unfinished_tasks += 1 # turn-on the worker thread threading.Thread(target=worker, daemon=True).start() # send thirty task requests to the worker for item in range(30): q.put(item)	# unfinished_tasks -= 1 print(&amp;#39;All task requests sent\n&amp;#39;, end=&amp;#39;&amp;#39;) # block until all tasks are done q.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Tue, 25 Jan 2022 14:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Our website builds with Hugo static site generator and Mainroad theme. This demo allows you to see what Mainroad based website looks like before deciding to go with it. Just keep in mind that the current demo shows the basics, a small part of what the combination of Hugo and Mainroad can do.
About Mainroad Mainroad is a responsive, simple, clean and content-focused Hugo theme based on the MH Magazine lite WordPress theme.</description>
    </item>
    
    <item>
      <title>Basic HTML Elements</title>
      <link>/post/basic-elements/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/basic-elements/</guid>
      <description>&lt;p&gt;The main purpose of this article is to make sure that all basic HTML Elements are decorated with CSS so as to not miss any possible elements when creating new themes for Hugo.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/post/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/hugo-template-primer/</guid>
      <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; &lt;a href=&#34;https://golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/post/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/getting-started-with-hugo/</guid>
      <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>
